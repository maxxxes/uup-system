#!/usr/bin/env python
# -*- coding: utf-8 -*-
# import subprocess as sub
from subprocess import Popen, PIPE, STDOUT
from print_colors import PrintColors
from settings import *

p = PrintColors()


def add_repository(name_repo):
    """ Добавление репозитория для установки пакета """
    prefix = 'Add Repo'
    cmd = 'add-apt-repository -y %s' % name_repo
    info_msg = '----- %s %s - GO -----' % (prefix, name_repo)
    ok_msg = '----- %s %s - DONE -----' % (prefix, name_repo)
    err_msg = '----- %s %s - ERROR -----' % (prefix, name_repo)
    pipe_call(cmd, info_msg=info_msg, ok_msg=ok_msg, err_msg=err_msg, warning_code_list=[0])


def install_package(name_package):
    """ Установка пакета """
    prefix = 'Install Package'
    cmd = 'apt-get -y install %s' % name_package
    info_msg = '----- %s %s - GO -----' % (prefix, name_package)
    ok_msg = '----- %s %s - DONE -----' % (prefix, name_package)
    err_msg = '----- %s %s - ERROR -----' % (prefix, name_package)
    pipe_call(cmd, info_msg=info_msg, ok_msg=ok_msg, err_msg=err_msg)


def pipe_call(cmd, info_msg=None, ok_msg=None, err_msg=None, stderr=PIPE, warning_code_list=None):
    print(p.color_print('header', info_msg or '----- START -----'))
    print(cmd)
    pipe = Popen(cmd.split(), stderr=stderr)
    out, err = pipe.communicate()
    print(pipe.returncode)
    # print('out = ', out)
    # print('err = ', err)
    if err:
    	if warning_code_list and pipe.returncode in warning_code_list:
    		print(p.color_print('warning', err or '----- WARNING -----'))
    	else:
	        print(p.color_print('fail', err_msg or '----- ERROR -----'))
	        print(err)
	        exit(1)
    print(p.color_print('okgreen', ok_msg or '----- DONE -----'))


def update_system():
	""" Стандартное обновление системы """
    print(p.color_print('okblue', '----- Start Update System -----\n'))

    for item in update_system_list:


    add_repository('ppa:webupd8team/sublime-text-3')
    install_package('sublime-text-installer')

 #    for i, cmd in enumerate([update, upgrade, dist_upgrade], start=1):
 #        finish_msg = '----- Update Stage %s - DONE -----\n' % i
 #        error_message = '----- Update Stage %s ERROR -----\n' % i
	# if i == 2:
 #            pipe_call(cmd, finish_msg=finish_msg, error_message=error_message, stdout=PIPE)
 #        else:
	#     pipe_call(cmd, finish_msg=finish_msg, error_message=error_message)

    print(p.color_print('okblue', '\n----- Finish Update System -----\n'))


# def remove_packages(name_packages_list):
#     print('----- Start Remove Packages -----\n')
#     for package in name_packages_list:
#         cmd = 'apt-get -y remove %s' % package
#         p = Popen(cmd.split(), stderr=PIPE)
#         out, err = p.communicate()
#         if err:
#             print('----- Remove Package %s ERROR -----\n' % package)
#             print(err)
#             exit(1)
#         print('----- Remove Package %s - DONE -----\n' % package)
#     print('----- Finish Remove Packages -----\n')


def install_my_programs():
    name_packages_list = [
        'guake',
        'git',
        'mc',
        'sublime-text-installer',
        'telegram'
    ]
    other_cmd_to_install = [
        #'ln -s /usr/share/applications/guake.desktop /etc/xdg/autostart/',
        'pwd',
    ]

    print('----- Start Install Packages -----\n')
    for package in name_packages_list:
        install_package(package)
    print('----- Finish Base Install Packages -----\n')

    print('----- Start Other Command -----\n')
    for cmd in other_cmd_to_install:
        pipe_call(cmd)
    print('----- Finish Other Command  -----\n')


if __name__ == '__main__':
    update_system()
    # install_my_programs()

